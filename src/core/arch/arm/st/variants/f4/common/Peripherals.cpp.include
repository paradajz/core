/*
    Copyright 2017-2022 Igor Petrovic

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
    sell copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

// common stm32f4 peripherals
// included by specific mcu variant - not to be compiled directly

#include "core/arch/common/ISR.h"

namespace
{
    class USBDescriptor : public core::mcu::peripherals::Descriptor
    {
        public:
        USBDescriptor() = default;

        std::vector<core::mcu::io::pin_t> pins() override
        {
            return _pins;
        }

        void* interface() override
        {
            return nullptr;
        }

        IRQn_Type irqn() override
        {
            return _irqn;
        }

        void enableClock() override
        {
            __HAL_RCC_GPIOA_CLK_ENABLE();
            __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
        }

        void disableClock() override
        {
            __HAL_RCC_GPIOA_CLK_DISABLE();
            __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
        }

        private:
        std::vector<core::mcu::io::pin_t> _pins = {
            // d+
            {
                .port      = CORE_MCU_IO_PIN_PORT_DEF(A),
                .index     = CORE_MCU_IO_PIN_INDEX_DEF(11),
                .mode      = core::mcu::io::pinMode_t::ALTERNATE_PP,
                .pull      = core::mcu::io::pullMode_t::NONE,
                .speed     = core::mcu::io::gpioSpeed_t::HIGH,
                .alternate = GPIO_AF10_OTG_FS,
            },

            // d-
            {
                .port      = CORE_MCU_IO_PIN_PORT_DEF(A),
                .index     = CORE_MCU_IO_PIN_INDEX_DEF(12),
                .mode      = core::mcu::io::pinMode_t::ALTERNATE_PP,
                .pull      = core::mcu::io::pullMode_t::NONE,
                .speed     = core::mcu::io::gpioSpeed_t::HIGH,
                .alternate = GPIO_AF10_OTG_FS,
            },
        };

        const IRQn_Type _irqn = OTG_FS_IRQn;
    } _usbDescriptor;
}    // namespace

extern "C" void USART1_IRQHandler(void)
{
    core::mcu::isr::uart(0);
}

extern "C" void USART2_IRQHandler(void)
{
    core::mcu::isr::uart(1);
}

extern "C" void USART3_IRQHandler(void)
{
    core::mcu::isr::uart(2);
}

extern "C" void UART4_IRQHandler(void)
{
    core::mcu::isr::uart(3);
}

extern "C" void UART5_IRQHandler(void)
{
    core::mcu::isr::uart(4);
}

extern "C" void USART6_IRQHandler(void)
{
    core::mcu::isr::uart(5);
}

extern "C" void OTG_FS_IRQHandler(void)
{
    core::mcu::isr::usb();
}

extern "C" void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
    uint8_t channel = 0;

    if (core::mcu::peripherals::uartChannel(huart->Instance, channel))
    {
        auto descriptor = core::mcu::peripherals::uartDescriptor(channel);

        descriptor->enableClock();

        for (size_t i = 0; i < descriptor->pins().size(); i++)
        {
            CORE_MCU_IO_INIT(descriptor->pins().at(i));
        }

        if (descriptor->irqn() != 0)
        {
            HAL_NVIC_SetPriority(descriptor->irqn(), 0, 0);
            HAL_NVIC_EnableIRQ(descriptor->irqn());
        }
    }
}

extern "C" void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
    uint8_t channel = 0;

    if (core::mcu::peripherals::uartChannel(huart->Instance, channel))
    {
        auto descriptor = core::mcu::peripherals::uartDescriptor(channel);

        descriptor->disableClock();

        for (size_t i = 0; i < descriptor->pins().size(); i++)
        {
            CORE_MCU_IO_DEINIT(descriptor->pins().at(i));
        }

        HAL_NVIC_DisableIRQ(descriptor->irqn());
    }
}

extern "C" void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
    uint8_t channel = 0;

    if (core::mcu::peripherals::i2cChannel(hi2c->Instance, channel))
    {
        auto descriptor = core::mcu::peripherals::i2cDescriptor(channel);

        descriptor->enableClock();

        for (size_t i = 0; i < descriptor->pins().size(); i++)
        {
            CORE_MCU_IO_INIT(descriptor->pins().at(i));
        }

        if (descriptor->irqn() != 0)
        {
            HAL_NVIC_SetPriority(descriptor->irqn(), 0, 0);
            HAL_NVIC_EnableIRQ(descriptor->irqn());
        }
    }
}

extern "C" void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
    uint8_t channel = 0;

    if (core::mcu::peripherals::i2cChannel(hi2c->Instance, channel))
    {
        auto descriptor = core::mcu::peripherals::i2cDescriptor(channel);

        descriptor->disableClock();

        for (size_t i = 0; i < descriptor->pins().size(); i++)
        {
            CORE_MCU_IO_DEINIT(descriptor->pins().at(i));
        }

        HAL_NVIC_DisableIRQ(descriptor->irqn());
    }
}

#include "core/arch/arm/st/common/Peripherals.cpp.include"